import os
import nibabel as nib
import numpy as np

input_folder = 'C:/Users/user/Desktop/Nouveau dossier/input folder'
output_folder = 'C:/Users/user/Desktop/Nouveau dossier/output folder'
patch_folder = 'C:/Users/user/Desktop/Nouveau dossier/patch_folder'


target_shape = (90, 90, 90)
patch_size = (30, 30, 30)
stride_size = (20, 20, 20)

def crop_nifti_image(input_file, output_file, target_shape):
    # Load the NIFTI image
    img = nib.load(input_file)
    data = img.get_fdata()
    input_shape = data.shape
    
    # Calculate the cropping ranges
    x_start = (input_shape[0] - target_shape[0]) // 2
    x_end = x_start + target_shape[0]
    
    y_start = (input_shape[1] - target_shape[1]) // 2
    y_end = y_start + target_shape[1]
    
    z_start = (input_shape[2] - target_shape[2]) // 2
    z_end = z_start + target_shape[2]
    
    # Perform cropping

    cropped_data = data[x_start:x_end, y_start:y_end, z_start:z_end]
   
    # Create a new NIFTI image with the cropped data
    cropped_img = nib.Nifti1Image(cropped_data, img.affine)
   
    # Save the cropped image
    nib.save(cropped_img, output_file)
   
    # Return the cropped image object
    return cropped_img


def extract_patches(cropped_img, patch_size, stride_size):
    patch_height = patch_size[0]
    patch_width = patch_size[1]
    patch_depth = patch_size[2]
    stride_height = stride_size[0]
    stride_width = stride_size[1]
    stride_depth = stride_size[2]

    img_h = cropped_img.shape[0]  # height of the cropped image
    img_w = cropped_img.shape[1]  # width of the cropped image
    img_d = cropped_img.shape[2]  # depth of the cropped image

    assert ((img_h - patch_height) % stride_height == 0 and
            (img_w - patch_width) % stride_width == 0 and
            (img_d - patch_depth) % stride_depth == 0), "Invalid patch and stride sizes"

    num_patches = ((img_h - patch_height) // stride_height + 1) * \
                  ((img_w - patch_width) // stride_width + 1) * \
                  ((img_d - patch_depth) // stride_depth + 1)

    patches = np.empty((num_patches, patch_height, patch_width, patch_depth))

    idx = 0
    for h in range(0, img_h - patch_height + 1, stride_height):
        for w in range(0, img_w - patch_width + 1, stride_width):
            for d in range(0, img_d - patch_depth + 1, stride_depth):
                patch = cropped_img[h:h+patch_height, w:w+patch_width, d:d+patch_depth]
                patches[idx] = patch
                idx += 1

    return patches


# Get the list of files in the input folder
file_list = os.listdir(input_folder)

# Iterate over each file in the input folder
for file_name in file_list:
    # Construct the full paths of the input and output files
    input_file = os.path.join(input_folder, file_name)
    output_file = os.path.join(output_folder, file_name)

    # Crop the NIFTI image and get the cropped image object
    cropped_img = crop_nifti_image(input_file, output_file, target_shape)

    # Load the cropped image from the output folder (optional)
    cropped_data = cropped_img.get_fdata()

    # Extract patches from the cropped image
    patches = extract_patches(cropped_data, patch_size, stride_size)

    # Process the patches as needed (e.g., save them, perform analysis, etc.)
    print(f"Processing {file_name}: {patches.shape[0]} patches")

    # Example: Save the patches as separate NIFTI files in the patch folder
    for i, patch in enumerate(patches):
        patch_file = os.path.join(patch_folder, f'patch_{i}_{file_name}')
        patch_img = nib.Nifti1Image(patch, np.eye(4))
        nib.save(patch_img, patch_file)
